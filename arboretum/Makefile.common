###############################################################
## Common flags and targets used by arboretum solvers.
## A minimal makefile for a new project is:
##
##      objects = algorithm helper
##		include ../Makefile.common
##
## which will compile src/algorithm.cpp and src/helper.cpp
## to object files and include them along with src/main.cpp
## to build the executable bin/run.
###############################################################

# Object files based on list given by user.
CC = @g++
dbg_objects = $(addprefix obj/, $(addsuffix .o, $(objects)))
opt_objects = $(addprefix obj/, $(addsuffix .opt.o, $(objects)))
prf_objects = $(addprefix obj/, $(addsuffix .prf.o, $(objects)))
src_files = $(addprefix src/, $(addsuffix .cpp, $(objects)))

# Compiler flags.
common_cppflags = -O3 -Wall -Wextra -pedantic -fPIC --std=c++17 -pthread
cppflags = $(common_cppflags)
opt_cppflags = $(common_cppflags) -DNDEBUG
prf_cppflags = $(common_cppflags) -DNDEBUG -g -fno-inline
incl = -I ../../include

# Common targets.
all: bin/run

clean:
	@echo " -> Cleaning bin and obj directories"
	@rm -rf obj/ bin/

bin:
	@mkdir -p bin

obj:
	@mkdir -p obj

bin/run: $(opt_objects) obj/main.opt.o
	@mkdir -p bin
	@echo " -> Linking main binary"
	$(CC) -o bin/run $(opt_objects) obj/main.opt.o

obj/%.o: src/%.cpp
	@mkdir -p obj
	@echo " -> Compiling $< in debug mode"
	$(CC) $(incl) $(cppflags) -o $@ $< -c

obj/%.opt.o: src/%.cpp
	@mkdir -p obj
	@echo " -> Compiling $< in release mode"
	$(CC) $(incl) $(opt_cppflags) -o $@ $< -c

obj/%.prf.o: src/%.cpp
	@mkdir -p obj
	@echo " -> Compiling $< in profile mode"
	$(CC) $(incl) $(prf_cppflags) -o $@ $< -c

depend: objects.d

objects.d: $(src_files) src/main.cpp
	@mkdir -p obj
	@echo " -> Updating dependencies"
	$(CC) $(incl) $(cppflags) -MM $^ | sed -E "s|(\w+)\.o|obj/\1\.o|" > objects.d
	$(CC) $(incl) $(cppflags) -MM $^ | sed -E "s|(\w+)\.o|obj/\1\.opt\.o|" >> objects.d
	$(CC) $(incl) $(cppflags) -MM $^ | sed -E "s|(\w+)\.o|obj/\1\.prf\.o|" >> objects.d

include objects.d
