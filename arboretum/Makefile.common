###############################################################
## Common flags and targets used by arboretum solvers.
## A minimal makefile for a new project is:
##
##      all = bin/main
##      objects = algorithm helper
##      include ../Makefile.common
##
## which will compile src/algorithm.cpp and src/helper.cpp
## to object files and include them along with src/main.cpp
## to build the executable bin/main.
###############################################################

arbory_dir = ../..

ifeq ($(VERBOSE), true)
	CC = g++
else
	CC = @g++
endif

# Object and source files based on lists given by user.

objects += $(addprefix obj/, $(project_objects))
objects += $(addprefix $(arbory_dir)/obj/, $(arbory_objects))

dbg_objects = $(addsuffix .o, $(objects))
opt_objects = $(addsuffix .opt.o, $(objects))
prf_objects = $(addsuffix .prf.o, $(objects))
src_files = $(addsuffix .cpp, $(subst obj,src, $(objects)))

dbg_objects += obj/test.o
opt_objects += obj/main.opt.o

# Compiler flags.

common_cppflags = -O3 -Wall -Wextra -pedantic -fPIC --std=c++17 -pthread -DGSL_THROW_ON_CONTRACT_VIOLATION
cppflags = $(common_cppflags)
opt_cppflags = $(common_cppflags) -DNDEBUG
prf_cppflags = $(common_cppflags) -DNDEBUG -g -fno-inline
incl = -I $(arbory_dir)/include

# Common targets.

all:

clean:
	@echo " -> Cleaning bin and obj directories"
	@rm -rf obj/ bin/

bin/main: $(opt_objects)
	@mkdir -p bin
	@echo " -> Linking $@ in release mode"
	$(CC) -o $@ $^

bin/test: $(dbg_objects)
	@mkdir -p bin
	@echo " -> Linking $@ in debug mode"
	$(CC) -o $@ $^

test: bin/test
	@bin/test

# Compile source files in their own parent directory.

$(dbg_objects):
	@mkdir -p $(shell dirname $@)
	@echo " -> Compiling $@ in debug mode"
	$(CC) $(incl) $(cppflags) -o $@ $(subst .o,.cpp,$(subst obj,src,$@)) -c

$(opt_objects):
	@mkdir -p $(shell dirname $@)
	@echo " -> Compiling $@ in release mode"
	$(CC) $(incl) $(opt_cppflags) -o $@ $(subst .opt.o,.cpp,$(subst obj,src,$@)) -c

$(prf_objects):
	@mkdir -p $(shell dirname $@)
	@echo " -> Compiling $@ in profile mode"
	$(CC) $(incl) $(prf_cppflags) -o $@ $(subst .prf.o,.cpp,$(subst obj,src,$@)) -c

# Dependencies of all compiled objects.

obj/objects.d: $(src_files) src/main.cpp src/test.cpp
	@mkdir -p obj
	@echo " -> Updating dependencies"
	$(CC) $(incl) $(cppflags) -MM $^ > $@
	@sed -E -i "s|(\w+\.o): (.*/)(\w+\.cpp)|\2\1: \2\3|" $@
	@sed -E -i "s|(.*)src(.*:)|\1obj\2|" $@

obj/objects.%.d: obj/objects.d
	@sed -E "s|\.o|\.$*.o|" $< > $@

include obj/objects.d obj/objects.opt.d obj/objects.prf.d
